El objetivo de este script es la creación y borrado de usuarios mediante la lectura de un fichero. Para ello nuestro script está claramente dividido en 3 secciones que realizan distintas tareas.
La primera sección se corresponde con la robustez. Aquí se realizan las siguientes comprobaciones. Que el usuario tenga privilegios de administración, necesario para los comandos que se van a realizar durante la ejecución del script. Además se comprueba que se le pasen el número correcto de parámetros y que el primer parámetro sea “-a” o “-s”.  Si se incumple cualquiera de estas premisas se le avisa al usuario y el programa acaba.
La siguiente sección se corresponde con el borrado de usuarios dentro del sistema. Esto sucede cuando el primer parámetro de llamada a la función es “-s”.  Lo primero que hacemos es crear el directorio /extra/backup si no existe. Lo hacemos con: 
[ ! -d "/extra/backup" ] && mkdir -p /extra/backup utilizamos “-p” en mkdir, que crea los directorios padres si no existen. Se crea cuando NO existen, ya que la condición de test es:  ! -d <>, que comprueba que <> no sea un directorio.
Para saber que usuarios debemos borrar leemos el fichero línea a línea. Esto se hace mediante un while que lee líneas, mientras las haya, y guarda lo leído en la variable “linea”. (while read -r linea). Luego obtenemos el usuario mediante: usuario=$(echo "$linea" | cut -d ',' -f 1), con esto guardamos en la variable usuario lo que haya antes de la coma en la variable línea,  según la sintaxis del fichero es el usuario. Funciona también si no hay coma. 
Luego comprueba que el usuario exista con id $usuario &> /dev/null if [ $(echo $?) -eq 0 ] primero se ejecuta el comando id y mediante &> /dev/null se logra que no saque nada por pantalla. Lo que nos interesa es su resultado de ejecución, que se comprueba en la condición del if. Si es 0, el usuario existe, y seguimos con el proceso de borrado. Si no existe pasamos a la siguiente línea.
Lo que sigue en el proceso de borrado es crear un backup del directorio home. Si esto ha sido exitoso se borra el usuario. Para el backup primero se almacena en una variable home la ruta al directorio de inicio (home=$(grep $usuario /etc/passwd | cut -d: -f6). Luego hacemos tar de usuario mediante tar >/dev/null 2>&1 -cf /extra/backup/$usuario.tar $home. Aqui se redirecciona la salida de tar. Además se utiliza -cf, c para crear el directorio y f para indicar que lo que sigue es el nombre del fichero a crear un comprimido del home del usuario, que estará en el directorio /extra/backup creado anteriormente. Se comprueba el éxito del backup, si es correcto se elimina el usuario. ([ $(echo $? -eq 0) ] && userdel -r “$usuario”
La última sección es la encargada de añadir usuarios. Se entra en esta sección cuando el primer argumento no es “-s”. Por las comprobaciones de la primera sección podemos afirmar que es “-a”.  
La lectura aquí es de 3 parámetros. Por lo que dentro del while de lectura leemos lo0s campos así: IFS=, read -r usuario password nComp <<< “$linea”. Luego se comprueba que ninguno de los 3 campos está vacío.
Posteriormente comprobamos si el usuario existe de forma similar al apartado anterior. Si es así se muestra un mensaje por pantalla. Sino se crea el usuario con los comandos:
useradd -c "$nComp" "$usuario" -K PASS_MAX_DAYS=30 -K UID_MIN=1815 -U -m -k /etc/skel 
Así se crea un usuario con caducidad de contraseña en  30 días, UID mínimo de 1815, grupo primario con su nombre (-U), con home y directorios de inicio (-m -k)
echo "$usuario:$paswrd" | chpasswd De esta forma se cambia la contraseña
usermod -U "$usuario" Así se permite que el usuario se pueda loggear.